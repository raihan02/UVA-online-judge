#include <bits/stdc++.h>
using namespace std;
#define unvisited -1
#define visited 1
typedef vector<int> vc;
vc vertex[30];
vc vk;
int dist[1005];
void bfs_algorithm(int src , int des)
{
    memset(dist , unvisited , sizeof dist);
    dist[src] = 0;
    queue <int> myqueue;
    myqueue.push(src);
    while(!myqueue.empty())
    {
        int top = myqueue.front();
        myqueue.pop();
        for(int i = 0; i < vertex[top].size(); i++)
        {
            int v = vertex[top][i];
            if(dist[v] == unvisited)
            {
                dist[v] = dist[top] + 1;
                myqueue.push(v);
            }
        }
    }
}
int main()
{
    int n , o = 0;

    while(cin >> n)
    {
        o++;
        int a;
        for(int i = 0; i < n; i++)
        {
            cin >> a;
            vertex[1].push_back(a);
            vertex[a].push_back(1);
        }
        for(int i = 2; i <= 19; i++)
        {
            cin >> n;
            for(int j = 0; j < n; j++)
            {
                cin >> a;
                vertex[i].push_back(a);
                vertex[a].push_back(i);
            }
        }
        int q;
        cin >> q;
        printf("Test Set #%d\n",o);
        while(q--)
        {
            int src , des;
            cin >> src >> des;
            bfs_algorithm(src, des);
            printf("%2d to %2d: %d\n",src, des, dist[des]);
        }

        for(int i = 0; i < 30; i++)
            vertex[i].clear();
        printf("\n");
    }
}
