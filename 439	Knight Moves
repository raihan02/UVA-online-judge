#include <bits/stdc++.h>
using namespace std;
typedef pair<int , int> pi;
const int rc = 8;
int fx[]= {1, -1, 1, -1, 2, 2, -2, -2}; /// direction for knight moves
int fy[]= {2, 2, -2 , -2 , 1, -1, 1, -1}; /// direction for knight moves
int visited[101][101];
string s1, s2;
int dis[101][101];

int flood_fill_bfs (int src1 , int des1 , int src2 , int des2)
{
    if(src1 == src2 and des1 == des2)
        return 0;

    for(int i = 0; i < 101; i ++)
    {
        for(int j = 0; j < 101; j++)
        {
            visited[i][j] = 0;
            dis[i][j] = 0;
        }
    }
    dis[src1][des1] = 0;
    visited[src1][des1] = 1;

    queue<pi> qu;

    qu.push(make_pair(src1, des1));

    while(!qu.empty())
    {
        int x = qu.front().first;
        int y = qu.front().second;
        qu.pop();

        for(int i =  0; i < 8; i++)
        {
            int p , q;
            p = x + fx[i];
            q = y + fy[i];
            if(p > 0 and p <= rc and q > 0 and q <= rc and visited[p][q] == 0)
            {
                visited[p][q] = 1;
                dis[p][q] = dis[x][y] + 1;
                qu.push(make_pair(p, q));
            }
            if(p == src2 and q == des2 )
            {
               return dis[x][y] + 1;
            }

        }

    }

    return -1;

}
void sets()
{
    for(int i = 0; i < 9; i++)
    {
        for(int j = 0; j < 9; j++)
        {
            visited[i][j] = 0;
            dis[i][j] = 999999;
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(0);
    while(cin >> s1 >> s2)
    {
        int xx ,yy , aa , bb;
        xx = s1[0] - 96;
        yy = s1[1] - 48;
        aa = s2[0] - 96;
        bb = s2[1] - 48;
        ///sets();
        int bfs = flood_fill_bfs(xx , yy , aa, bb);
        cout<<"To get from "<<s1 <<" to "<<s2<<" takes "<<bfs<<" knight moves."<< endl;
    }

}
